# coding: utf8

import serial
import threading,time
import thread

cpmm = 250



<<<<<<< HEAD
=======
def deplacer(t):
    x_mm = t[0]
    y_mm = t[1]
    x_clicks = x_mm * cpmm
    y_clicks = y_mm * cpmm
    deplacer_aux((x_clicks, y_clicks, angle))

def deplacer_aux(t): ##x,y en clicks, angle en millième de radians. Déplacement rectiligne entre deux points
    x,y,angle = t
    readPos()

    ##calcul de l'angle à donner en consigne
    pos_x, pos_y, pos_angle = position
    delta_x = x - pos_x
    delta_y = y - pos_y
    norme = pow((delta_x**2+delta_y**2),1/2)
    if delta_y > 0 :
        cos_cons_angle = delta_x / norme
        cons_angle = arccos(cos_cons_angle)
    else :
        cos_cons_angle = delta_x / norme
        cons_angle = -arccos(cos_cons_angle)
    delta_angle = cons_angle - pos_angle
    ##fin du calcul

    cmd(3,delta_angle) ## le robot tourne de delta_angle
    cmd(1,(norme,4000)) ## le robot avance de norme à la vitesse 4000
    cmd(3,angle-cons_angle) ## le robot se met dans l'angle donné en consigne

def aller(t): ##distance en mm, angle en °, case6.
	distance,angle = t
	distance += 32768
	angle += 32768
	distance=min(distance,256**2-1)
	distance=max(0,distance)
	angle = min(angle,256**2-1)
	angle = max(0,angle)
	Arg1 = distance/256
	Arg0 = distance%256
	Arg3 = angle/256
	Arg2 = angle%256

	move.write(chr(6)+chr(4) +chr(Arg0) +chr(Arg1) +chr(Arg2) +chr(Arg3))
	
def allerSeq(t): ##distance en mm, angle en °, case 7.
	distance,angle = t
	distance += 32768
	angle += 32768
	distance=min(distance,256**2-1)
	distance=max(0,distance)
	angle = min(angle,256**2-1)
	angle = max(0,angle)
	Arg1 = distance/256
	Arg0 = distance%256
	Arg3 = angle/256
	Arg2 = angle%256

	mo
